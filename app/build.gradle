//==============================================================================//
// Android
//==============================================================================//
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.github.toastedsnackbar.arbor"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "0.0.1"
        testApplicationId "com.github.toastedsnackbar.arbor.test"
        testInstrumentationRunner "com.github.toastedsnackbar.test.ArborTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        test {
            java.srcDirs = ['src/test/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

        // disable android instrumentation test compilation
        androidTest {
            java.srcDirs = []
            res.srcDirs = []
            assets.srcDirs = []
        }
    }

    // log unit test results
    tasks.withType(Test) {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

//==============================================================================//
// Module dependencies
//==============================================================================//
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support:recyclerview-v7:23.4.0'
    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'de.hdodenhof:circleimageview:2.0.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.robolectric:shadows-httpclient:3.0'
    testCompile "org.robolectric:shadows-support-v4:3.0"
    testCompile 'com.squareup.okhttp:mockwebserver:2.6.0'
    testCompile "org.powermock:powermock-module-junit4:1.6.3"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.3"
    testCompile "org.powermock:powermock-api-mockito:1.6.3"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.3"
    testCompile('com.squareup.assertj:assertj-android:1.1.0') {
        exclude module: 'support-annotations'
    }
}

//==============================================================================//
// Generate api_config.json
//==============================================================================//
import groovy.json.JsonBuilder

task generateApiConfig {
    def json = new JsonBuilder()

    try {
        json client_id: getSystemEnvVar("ARBOR_CLIENT_ID"),
                client_secret: getSystemEnvVar("ARBOR_CLIENT_SECRET"),
                client_state: getSystemEnvVar("ARBOR_CLIENT_STATE")
    } catch (GradleException e) {
        json client_id: getGradleProp("ARBOR_CLIENT_ID"),
                client_secret: getGradleProp("ARBOR_CLIENT_SECRET"),
                client_state: getGradleProp("ARBOR_CLIENT_STATE")
    }

    def outFile = file('src/main/res/raw/api_config.json')
    outFile.write(json.toPrettyString())
}

preBuild.dependsOn('generateApiConfig')

def getSystemEnvVar(String var) {
    def val = System.getenv(var)

    if (val == null)
        throw new GradleException("Required system environment variable" +
                "\"" + var + "\" is not set.")
    return val
}

def getGradleProp(String prop) {
    def val = System.getProperty(prop, null)

    if (val == null) {
        throw new GradleException("Required property \"" + prop + "\"" +
                "is not set in gradle.properties")
    }

    return val
}

//==============================================================================//
// Test code coverage reporting
//==============================================================================//
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

task jacocoTestReport(type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    jacocoClasspath = configurations['androidJacocoAnt']

    reports {
        xml {
            enabled true
            destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }

        html {
            enabled = true
            destination "${buildDir}/reports/jacoco/test/html"
        }
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*', '**/*$$*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: projectDir, includes: ['**/*.exec'])
}
